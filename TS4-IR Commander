/*
 SBS TS-4 IR Remote commander by sendust
 Created 2020/9/17
 Code maintained by sendust
 IR Send must connect to pin 3 (PWM)
 IR Recv must connect to pin 2 (Timer)

IRsend Class public member function

void  sendSAMSUNG (unsigned long data, int nbits)
void  sendLG (unsigned long data, int nbits)


LG remote -   Decode type = 3, Decode BITS = 32


2020/9/19
Introduce irreceiver class
2020/9/21
introduce COMPILE LCD class
Vcc control pin changed (from digital output -> digital input, HI-Z mode)


 */

#include <SoftwareSerial.h>
#include <IRremote.h>


#define LED_DECAY 5000
#define BUTTON_DELAY 80
#define LONGPRESS 30000
#define IR_RECEIVE_PIN 2
#define IR_SEND_PIN  3              // Arduino Mega

class pushbutton
{
  private:
  int m_keyinput;
  int m_button_previous;
  int m_button_now;
  int m_result;
  unsigned long m_longpress;
  unsigned int m_count_push = 0;
  unsigned long m_last_transition;
  const unsigned long m_guard_time = 0xFFFFFFFF - BUTTON_DELAY;

  public:

  pushbutton(int keyinput)   // Initiator (define button input pin, led outpupt pin)
  {
    m_keyinput = keyinput;
    pinMode(keyinput, INPUT_PULLUP);
    m_last_transition = millis();
    m_button_previous = digitalRead(keyinput);
    m_button_now = digitalRead(keyinput);
    m_longpress = 0;
  }

  int scan(unsigned long time_milli)
  {
    m_button_now = digitalRead(m_keyinput);
    m_result = 0;
    if (m_button_now == 0)
    {
      m_longpress++;                        // detect long press
      if (m_longpress == LONGPRESS)
        m_result = m_keyinput + 100;        // return switch pin number * 100

      if (m_button_previous == 1)
        if (time_milli - m_last_transition > BUTTON_DELAY)
          if (time_milli - m_last_transition < m_guard_time)     // prevent unsigned long overflow event
          {
            m_last_transition = time_milli;
            m_result = m_keyinput;          // return switch pin number
          }
    }
        
    if (m_button_now == 1)
    {
      m_longpress = 0;                    // initialize long press count
      if (m_button_previous == 0)
        m_last_transition = time_milli;   // Record release time
    }

    m_button_previous = m_button_now;
    
    if (m_result)
    {
      Serial.print("return value is ");
      Serial.print(m_result);
      Serial.print("  //  press count = ");
      Serial.println(++m_count_push);
    }

    return m_result;
  }
};


class cHeartBeat
{
  private:
  unsigned long m_count;
  int m_pinLED;
  unsigned long m_mask;

  public:
  cHeartBeat(int pinLED)            // define heartbeat LED pin
  {
    pinMode(pinLED, OUTPUT);
    digitalWrite(pinLED, LOW);
    m_pinLED = pinLED;
    m_count = 0;
    m_mask = 0x00003E00;
  }

  run()
  {
    // Serial.println(m_mask);
    m_count++;
    digitalWrite(m_pinLED, !((m_count & m_mask) && 1));
  }
  
};


class compilelcd
{
  private:
  SoftwareSerial _sSerial;
  
  public:
  compilelcd(int pin_rx, int pin_tx) : _sSerial(pin_rx, pin_tx) {}

  void start()
  {
    _sSerial.begin(19200);
  }

    void lcdclear()      // Clear LCD Screen
  {
    _sSerial.print((char)0xA3);
    _sSerial.print((char)0x01);
  }

  void lcdcursor(bool onoff)      // cursor control (on, off)
  {
    char cmd = 0x0C;   //  (cursor on : 0x0E, cursor off : 0x0C)
    if (onoff)
      cmd = 0x0E;
    _sSerial.print((char)0xA3);
    _sSerial.print((char)cmd);
  }


  int printtextat(char x, char y, char *pstring)
  {
    int count = 0;
    Serial.print("Print string is ");
    
    _sSerial.print((char)0xA1);      // set cursor location
    _sSerial.print((char) x);
    _sSerial.print((char) y);
    
    _sSerial.print((char)0xA2);
    while(*pstring)
    {
      _sSerial.print((char)*pstring);
      Serial.print(*pstring);
      pstring++;
      count++;
    }
    _sSerial.print((char)0x00);
    
    Serial.println();
    Serial.print("Print character count is ");
    Serial.println(count);

    return count; 
  }

  
  int printnumberat(char x, char y, unsigned long number)
  {
    String mystring(number);
    Serial.print("Number of digit is --- ");
    Serial.println(mystring.length());
    char pstring[mystring.length()+1];      // Convert number to string
    int i;
    for (i = 0 ; i < mystring.length() ; i++)
    {
      pstring[i] = (char)mystring.charAt(i);
    }
    pstring[mystring.length()] = 0;         // Finialize string array
    return printtextat(x, y, pstring);
  
  }
  
  int printStringat(char x, char y, String string)      // print Arduino String type
  {
    char pstring[string.length()+1];      // Convert number to string
    int i;
    for (i = 0 ; i < string.length() ; i++)
    {
      pstring[i] = (char)string.charAt(i);
    }
    pstring[string.length()] = 0;         // Finialize string array
    return printtextat(x, y, pstring);
  }

};


///// Create COMPILE LED OBJECT //////////////////////////////////////////////////////////////////////////////
compilelcd clcd(A3, A4);      // RX, TX pin


class cVccControl4
{
  private:
  unsigned int count = 0;
  unsigned int modular = 0;
  int pin1, pin2, pin3, pin4, pin11, pin12, pin13, pin14;
  bool toggle_all = 0;
  
  public:
  cVccControl4(int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8)
  {
    pinMode(p1, INPUT);        // IR Vcc control, Begin with HI-Z
    pinMode(p2, INPUT);        // IR Vcc control, Begin with HI-Z
    pinMode(p3, INPUT);        // IR Vcc control, Begin with HI-Z
    pinMode(p4, INPUT);        // IR Vcc control, Begin with HI-Z
    
    pinMode(p5, OUTPUT);        // BTN LED control
    pinMode(p6, OUTPUT);        // BTN LED control
    pinMode(p7, OUTPUT);        // BTN LED control
    pinMode(p8, OUTPUT);        // BTN LED control

    digitalWrite(p5, LOW);
    digitalWrite(p6, LOW);
    digitalWrite(p7, LOW);
    digitalWrite(p8, LOW);
    pin1 = p1;
    pin2 = p2;
    pin3 = p3;
    pin4 = p4;
    pin11 = p5;
    pin12 = p6;
    pin13 = p7;
    pin14 = p8;
  }
  
  int select()
  {
    pinMode(pin1, INPUT);
    pinMode(pin2, INPUT);
    pinMode(pin3, INPUT);
    pinMode(pin4, INPUT);
    
    digitalWrite(pin11, LOW);
    digitalWrite(pin12, LOW);
    digitalWrite(pin13, LOW);
    digitalWrite(pin14, LOW);
    
      count++;
      modular = count % 6;
      switch(modular)
      {
        case 0:
        pinMode(pin1, OUTPUT);        // setup IR_Vcc control
        digitalWrite(pin1, HIGH);
        digitalWrite(pin11, HIGH);
        Serial.println("pin 1 Activated");
        clcd.printtextat(0,0, "Select Monitor 1");
        break;

        case 1:
        pinMode(pin2, OUTPUT);        // setup IR_Vcc control
        digitalWrite(pin2, HIGH);
        digitalWrite(pin12, HIGH);
        Serial.println("pin 2 Activated");
        clcd.printtextat(0,0, "Select Monitor 2");
        break;

        case 2:
        pinMode(pin3, OUTPUT);        // setup IR_Vcc control
        digitalWrite(pin3, HIGH);
        digitalWrite(pin13, HIGH);
        Serial.println("pin 3 Activated");
        clcd.printtextat(0,0, "Select Monitor 3");
        break;

        case 3:
        pinMode(pin4, OUTPUT);        // setup IR_Vcc control
        digitalWrite(pin4, HIGH);
        digitalWrite(pin14, HIGH);
        Serial.println("pin 4 Activated");
        clcd.printtextat(0,0, "Select Monitor 4");
        break;

        case 4:
        Serial.println("Vcc all off");                      // Vcc all off
        clcd.printtextat(0,0, "                ");
        clcd.printtextat(0,0, "Select NONE");
        break;


        case 5:
        pinMode(pin1, OUTPUT);        // setup IR_Vcc control
        pinMode(pin2, OUTPUT);        // setup IR_Vcc control
        pinMode(pin3, OUTPUT);        // setup IR_Vcc control
        pinMode(pin4, OUTPUT);        // setup IR_Vcc control
        digitalWrite(pin1, HIGH);
        digitalWrite(pin2, HIGH);
        digitalWrite(pin3, HIGH);
        digitalWrite(pin4, HIGH);
        digitalWrite(pin11, HIGH);
        digitalWrite(pin12, HIGH);
        digitalWrite(pin13, HIGH);
        digitalWrite(pin14, HIGH);
        Serial.println("Vcc all ON");                      // Vcc all ON
        clcd.printtextat(0,0, "                ");
        clcd.printtextat(0,0, "Select ALL");
        break;

        default:
        break;
        
      }
    }


  
};


class irreceiver                      // customized IRrecv object
{
  private:
  IRrecv _irrecv;
  unsigned long count = 0;
  
  public:
  irreceiver(int pin_input) : _irrecv(pin_input) { }

  void irstart()
  {
    _irrecv.enableIRIn(); 
  }

  void irresume()
  {
    _irrecv.resume();
  }

  bool scan(decode_results *results)
  {
    if (_irrecv.decode(results))
    {
      _irrecv.resume();
      if (results->value == 0xFFFFFFFF)     // prevent repeat code
        return 0;
      return 1;
    }
    else
      return 0;
  }

};



//IRrecv irrecv(IR_RECEIVE_PIN);

irreceiver irr(2);
IRsend irsend;

pushbutton btn1(A1);
pushbutton btn2(A2);
cHeartBeat beatled(13);
cHeartBeat beatled2(11);
cVccControl4 Vcc(A0, 7, 8, 10, 9, 4, 5, 6);


unsigned long time_millis = millis();

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  // Start compile LCD
  clcd.start();
  clcd.lcdclear();
  //irrecv.enableIRIn(); // Start the receiver
  irr.irstart();

  clcd.printtextat(0,0, "Welcome to");
  clcd.printtextat(0,1, "IR Commander");
  clcd.lcdcursor(0);           // remove cursor
}


void loop() { // run over and over
  
  decode_results ir_result;
  time_millis = millis();
  
  if (irr.scan(&ir_result))
  {
    clcd.printtextat(0, 1, "                ");
    clcd.printStringat(0, 1, String(ir_result.value, HEX));
    Serial.println(ir_result.value, HEX);
    Serial.print("Decode type = ");
    Serial.println(ir_result.decode_type);
    Serial.print("Decode BITS = ");
    Serial.println(ir_result.bits);
    if (ir_result.decode_type == 3)       // Check if Remote Protocol is LG 
    {
      irsend.sendLG(ir_result.value, 32);       // send samsung TV/VIDEO
      delay(50);
      irr.irstart();                       // mandatory line after ir transmission !!!!!
    }
  }

  switch(btn1.scan(time_millis) | btn2.scan(time_millis))
  {
     case A1:     // press A1
      Serial.println("A1 button Pressed"); 
      Vcc.select();
      break;
    
     case A2:     // press A2
     Serial.println("A2 button Pressed");
     clcd.printtextat(0, 1, "                ");
     clcd.printtextat(0, 1, "CHANGE INPUT    ");
     irsend.sendLG(0x20dfd02f, 32);           // send LG TV/VIDEO
     delay(50);
     irsend.sendSAMSUNG(0xe0e0807f, 32);      // send samsung TV/VIDEO
     delay(50);
     irr.irstart();                       // mandatory line after ir transmission !!!!!
     break;

     default:
      break;
   
  }
  beatled.run();
  beatled2.run();
}
